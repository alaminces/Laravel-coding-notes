
=============================Laravel Route ржХрж┐?=============================

рж╕рж╛ржзрж╛рж░ржгржд ржЗржВрж░рзЗржЬрж┐ рж╢ржмрзНржж route ржпрж╛ржХрзЗ ржЕржирзЗржХ рж╕ржорзЯ ржЖржорж░рж╛ ржмрж╛ржВрж▓рж╛рзЯ ржмрж▓рж┐ рж░рзБржЯ ржпрж╛рж░ ржЕрж░рзНрже ржжрж╛ржБрзЬрж╛рзЯ ржЧржирзНрждржмрзНржпрж╕рзНржерж▓рзЗ ржкрзМржБржЫрж╛ржирзЛрж░ рж░рж╛рж╕рзНрждрж╛ред ржЖрж░ Laravel Application ржП route рж╣ржЪрзНржЫрзЗ URL ржерзЗржХрзЗ request ржЧрзНрж░рж╣ржг ржХрж░рзЗ ржПржмржВ application ржХрзЗ resource ржПрж░ ржЬржирзНржп ржирж┐рж░рзНржжрзЗрж╢ржирж╛ ржкрзНрж░ржжрж╛ржи ржХрж░рзЗред ржЖрж░рзЛ рж╕рж╣ржЬ ржнрж╛ржмрзЗ ржмрж▓рж╛ ржпрж╛рзЯ route рж╣рж▓ ржЖржкржирж╛рж░ ржЕрзНржпрж╛ржкрзНрж▓рж┐ржХрзЗрж╢ржирзЗрж░ ржПржХржЯрж┐ request ржПрж░ ржмрж┐ржкрж░рзАрждрзЗ ржХрзЛржи URL ржЯрж┐ hit рж╣ржмрзЗ? ржмрж╛ ржХрзЛржерж╛рзЯ ржерзЗржХрзЗ ржХрж┐ response ржХрж░ржмрзЗ рждрж╛ ржирж┐рж░рзНржзрж╛рж░ржгрзЗрж░ ржПржХржЯрж┐ ржЙржкрж╛ржпрж╝ред Laravel ржП рж╕ржм route ржЧрзБрж▓рзЛ routes ржлрзЛрж▓рзНржбрж╛рж░рзЗ рждрзИрж░рзА ржХрж░рж╛ ржерж╛ржХрзЗред ржПрж░ ржоржзрзНржпрзЗ web application ржПрж░ route рж╕ржорзВрж╣ routes/web.php рждрзЗ рж▓рж┐ржЦрж╛ рж╣рзЯред ржПржмржВ API ржПрж░ ржЬржирзНржп route рж╕ржорзВрж╣ routes/api.php рждрзЗ рж▓рж┐ржЦрж╛ рж╣рзЯред Laravel Framework ржП route ржПрж░ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ рж╕рзБржмрж┐ржзрж╛ рж╣ржЪрзНржЫрзЗ ржЖржкржирж┐ ржПржХ ржпрж╛рзЯржЧрж╛ ржерзЗржХрзЗржЗ рж╕ржорж╕рзНржд route ржХрзЗ ржирж┐рзЯржирзНрждрзНрж░ржг ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи ржЕрж░рзНржерж╛рзО ржкрж░ржмрж░рзНрждрж┐рждрзЗ route рж╕ржорзНржкрж░рзНржХрж┐ржд ржпрзЗржХрзЛржирзЛ ржзрж░ржирзЗрж░ ржкрж░рж┐ржмрж░рзНрждржи ржПржЦрж╛ржи ржерзЗржХрзЗржЗ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред



=============================About Route Start=============================
# Route => Facade Class 
# :: => Scope Resolution Operator 
# get() => HTTP GET Method
# function() => Anonymous Function
# return "welcome"; => Response
# view('welcome'); => Return View
# {name} => Route Parameter
# {name?} => Optional Route Parameter

тЬЕ HTTP Verbs Supported:
# Route::get() тЖТ For reading
# Route::post() тЖТ For submitting form
# Route::put() тЖТ For updating data
# Route::delete() тЖТ For deleting data
# Route::patch() тЖТ For partial updates
# Route::options() тЖТ For CORS requests


=============================About Route End=============================

=============================Routing Start=============================
<?php 
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\HomeController;
use Illuminate\Http\Request;

// тЬЕ Basic Route:
Route::get('/', function () {
    return view('welcome');
});

// тЬЕ Route with Parameter:
Route::get('/user/{name}', function($name) {
    return "User name is $name";
});

// тЬЕ Optional Parameters:
Route::get('/user/{name?}', function(?string $name = 'user') {
    return "User name is $name";
});

// тЬЕ Route Naming:
Route::get('/profile', function() {
    return "Route name is profile";
})->name('profile');

// тЬЕ Named Route Usage:
// <a href="{{ route('profile') }}">Profile</a>

// тЬЕ Redirect Route
Route::get('/dashboard', function() {
    return "Welcome to the dashboard";
});

Route::redirect('/home', '/dashboard');

// тЬЕ Dependency Injection 
Route::get('/ip', function (Request $request) {
    return $request->ip();
});


// тЬЕ Route to Controller Method:
Route::get('/home-page', [HomeController::class,'index']);

// тЬЕ Route Grouping:
Route::prefix('admin')->group(function() {
    Route::get('/login', function() {
        return "admin login";
    });

    Route::get('/profile', function() {
        return "admin profile";
    });

    Route::get('/logout', function() {
        return 'admin logout';
    });
});

// тЬЕ Middleware with Route:
Route::get('/dashboard', function() {
    return "welcome to dashboard";
})->middleware(['auth']);


// тЬЕ Route Model Binding (Implicit):
Route::get('/user/{user}', function(App\Models\User $user) {
    return $user;
});
Route::get('/user/{user}', function(User $user) {
    return $user;
});

// тЬЕ Custom Middleware in Route:
Route::middleware(['auth','isAdmin'])->group(function() {
    Route::get('/admin', function() {
        return "Admin";
    });
});



// тЬЕ API Routes (routes/api.php)
Route::get('/api/user', function() {
    return response()->json(['name' => 'John Doe']);
});

// тЬЕ Fallback Route (404):
Route::fallback( function() {
    return "Not found! 404";
});
// тЬЕ Fallback Route with Custom 404 Page:
Route::fallback(function () {
    return response()->view('errors.404', [], 404);
});

// тЬЕ Route Caching (Performance Boost):
/* 
    php artisan route:cache
    php artisan route:clear
*/


// тЬЕ Redirecte Default
Route::get('/dashboard', function() {
    return "Welcome to the dashboard";
})->name('dashboard');

// тЬЕ Redirect Default
Route::redirect('/home', '/dashboard');

// тЬЕ Redirect with Status Code
Route::redirect('/home', '/dashboard', 301);
Route::permanentRedirect('/here', '/there');

// Redirect with Controller Method
return redirect('/dashboard');

// Redirect with Named Route
return redirect()->route('dashboard');

// Redirect with URL
return redirect()->to('/dashboard');

// Redirect with Flash Data
return redirect('/dashboard')->with('message', 'Welcome to the dashboard');

Route::get('/dashbaord', function() {
    return session('message', 'No message set');
});


// Redirect to Previous Page
return redirect()->back();





/**
 * Route::redirect('/home', '/dashboard', 301);
 * This will redirect the '/home' URL to '/dashboard' with a 301 Moved Permanently status code.
 * 301 status code indicates that the resource has been permanently moved to a new URL.
 * This is useful for SEO purposes and ensures that search engines update their links accordingly.
 * You can also use other status codes like 302 (Default) (Temporary Redirect) based on your requirements.
 * 302 = Temporary redirect (default)
 * 301 = Permanent redirect (SEO friendly)
 */


?>
=============================Routing End=============================


===========================Dependency Injection (DI)===========================
Dependency Injection ржорж╛ржирзЗ рж╣рж▓рзЛ тАФ
ЁЯСЙ ржПржХржЯрж┐ ржХрзНрж▓рж╛рж╕рзЗрж░ ржжрж░ржХрж╛рж░рж┐ ржЬрж┐ржирж┐рж╕ (ржЕрж░рзНржерж╛рзО ржЕржирзНржп ржХрзНрж▓рж╛рж╕ ржмрж╛ ржЕржмржЬрзЗржХрзНржЯ) ржмрж╛ржЗрж░рзЗ ржерзЗржХрзЗ ржЕржЯрзЛржнрж╛ржмрзЗ ржжрж┐рзЯрзЗ ржжрзЗржУрзЯрж╛, ржпрж╛рждрзЗ рждрзЛржорж╛рж░ ржХрзЛржб ржкрж░рж┐рж╖рзНржХрж╛рж░ ржУ рж╕рж╣ржЬ рж╣рзЯред

ЁЯСЙ Dependency Injection рж╣рж▓рзЛ рж╕рзЗржЗ ржжрзНржмрж┐рждрзАрзЯ ржкржжрзНржзрждрж┐ тАФ ржпрзЗржЦрж╛ржирзЗ Laravel ржХрзНрж▓рж╛рж╕рзЗрж░ ржжрж░ржХрж╛рж░рж┐ ржЬрж┐ржирж┐рж╕ (dependency) ржирж┐ржЬрзЗ ржерзЗржХрзЗржЗ ржЗржиржЬрзЗржХрзНржЯ ржХрж░рзЗ ржжрзЗрзЯред

ЁЯФ╣ Laravel ржП Dependency Injection ржХрж┐ржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рзЗ?
Laravel ржПрж░ Service Container ржЕржЯрзЛржорзЗржЯрж┐ржХ ржПржЗ ржХрж╛ржЬ ржХрж░рзЗ ржжрзЗрзЯред

<?php 
// use Illuminate\Http\Request;

Route::get('/ip', function (Request $request) {
    return $request->ip();
});

?>

ЁЯФ╣ Dependency Injection ржХрзЗржи ржжрж░ржХрж╛рж░?
тЬЕ ржХрзНрж▓рж╛рж╕ ржЧрзБрж▓рзЛ ржЖрж▓рж╛ржжрж╛ рж░рж╛ржЦрж╛ ржпрж╛рзЯ (Loose Coupling)
тЬЕ ржХрзЛржб clean, flexible ржУ testable рж╣рзЯ
тЬЕ Service Container Laravel ржП ржЗржиржЬрзЗржХрж╢ржи рж╕рж╣ржЬ ржХрж░рзЗ ржжрзЗрзЯ


================View Routes================
<?php 
Route::view('/welcome', 'welcome');
Route::view('/welcome', 'welcome', ['name' => 'Taylor']);
?>


================Listing Your Routes================
php artisan route:list
php artisan route:list --path=api
php artisan route:list --except-vendor
php artisan route:list --only-vendor


================Regular Expression Constraints (Parameter validation)================
<?php 
Route::get('/user/{id}', function ($id) {
    return "User ID is $id";
})->where('id', '[0-9]+'); // Only accepts numeric IDs

Route::get('/user/{name}', function ($name) {
    return "User name is $name";
})->where('name', '[A-Za-z]+'); // Only accepts alphabetic names

Route::get('/user/{id}/{name}', function ($id, $name) {
    return "User ID is $id and name is $name";
})->where(['id' => '[0-9]+', 'name' => '[A-Za-z]+']); // Multiple constraints

Route::get('/product/{id}', function ($id) {
    return "Product ID is $id";
})->whereNumber('id'); // Only accepts numeric IDs

Route::get('/category/{slug}', function ($slug) {
    return "Category slug is $slug";
})->whereAlpha('slug'); // Only accepts alphabetic slugs

Route::get('/post/{id}', function ($id) {
    return "Post ID is $id";
})->whereAlphaNumeric('id'); // Only accepts alphanumeric IDs


Route::get('/category/{category}', function($category) {
    return $category;
})->whereIn('category',['electronics','furniture','clothing','books']);
// Note: This will only match the specified categories


?>

================Global Constraints================

 * Global Constraints рж╣рж▓рзЛ Laravel-ржП ржПржоржи ржПржХржЯрж╛ ржлрж┐ржЪрж╛рж░, ржпрзЗржЦрж╛ржирзЗ рждрзБржорж┐ ржПржХржмрж╛рж░ржЗ ржмрж▓рзЗ ржжрж╛ржУ ржХрзЛржирзЛ рж░рзБржЯ ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ ржпрзЗржоржи {id}, {slug}тАФ ржХрзЗржоржи ржзрж░ржирзЗрж░ рж╣ржмрзЗ (ржпрзЗржоржи: рж╕ржВржЦрзНржпрж╛рж░ рж╣ржмрзЗ, ржЕржХрзНрж╖рж░рзЗрж░ рж╣ржмрзЗ ржЗрждрзНржпрж╛ржжрж┐)ред
    * ржПрж░ ржлрж▓рзЗ, рждрзБржорж┐ ржпржЦржиржЗ ржУржЗ ржкрзНржпрж╛рж░рж╛ржорж┐ржЯрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗ, Laravel ржирж┐ржЬрзЗ ржерзЗржХрзЗржЗ рж╕рзЗржЗ ржирж┐рзЯржоржЧрзБрж▓рзЛ ржкрзНрж░рзЯрзЛржЧ ржХрж░ржмрзЗред
    * ржХрзЛржерж╛ржпрж╝ рж▓рж┐ржЦржмрзЛ?
        1. RouteServiceProvider.php ржлрж╛ржЗрж▓рзЗ
        2. app/Providers/RouteServiceProvider.php
        3. boot() ржорзЗржержбрзЗрж░ ржнрж┐рждрж░рзЗ
<?php

Route::get('/user/{id}', function($id) {
    return "User ID is $id";
});

Route::get('/category/{slug}', function($slug) {
    return "Category slug is $slug";
});

# Global Constraints in AppServiceProvider.php
    public function boot(): void
    {
        //global constraints
        Route::pattern('id', '[0-9]+');
        Route::pattern('slug', '[a-z0-9-]+');
    }
?>



================Encoded Forward Slashes================
<?php
Route::get('/search/{search}', function (string $search) {
    return $search;
})->where('search','.*');
// Note: This route will match any search term including slashes

// Input: http://127.0.0.1:8000/search/rakib/hasan
// Output: rakib/hasan

?>


================Route URL Generate================

<a href="{{ route('profile','alamin58') }}">Profile</a>
<a href="{{ route('profile',['username' => 'alamin58']) }}">Profile</a>

<?php
Route::get('/profile/{username}', function($username) {
    return "Profile Username is $username";
})->name('profile');
// Note: This route will generate a URL like /profile/alamin58

// Redirect Route with passing parameters
Route::get('/profile/{username}', function($username) {
    return "Profile Username is $username";
})->name('profile');

Route::get('/my-profile', function() {
    // return redirect()->route('profile', ['username' => 'alamin58']);
    return to_route('profile', ['username' => 'alamin58']);
});
?>

================Inspecting the Current Route================
<?php

Route::get('/profile', function(Request $request) {
    if( $request->route()->named('profile') ) {
        return "Profile route is active";
    }
    return "Profile route is active";
})->name('profile');
?>
================Route Name Prefixes================
<?php
Route::name('admin.')
    ->prefix('admin')
    ->group(function () {
    Route::get('/dashboard', [HomeController::class, 'dashboard'])->name('dashboard');
    Route::get('/profile', [HomeController::class, 'profile'])->name('profile');
});

Route::prefix('user')
    ->as('user.')
    ->group(function () {
    Route::get('/dashboard', [HomeController::class, 'dashboard'])->name('dashboard');
    Route::get('/profile', [HomeController::class, 'profile'])->name('profile');
});
?>
Note: php artisan route:list --path=admin

================outes================
================outes================
================outes================
================outes================